(module
  ;; string format: length(i32) data(bytes){length}
  (def mem (import "./memory"))

  (def min {fun [x y] (if (lt x y) x y)})
  (def length {fun [w] (i32_load w)})

  (export length length)
  (export equal_at {fun [a a_start b b_start len] (block
    ;; minimum lengths to compare.
    (def min_len
      (min len
        (min
          (sub (length a) a_start)
          (sub (length b) b_start))))
    (if
      ;; if neither string is long enough, return false
      (neq min_len len)
      0
      [block
        (def i 0)
        (loop {and
          (lt i len)
          [eq
            (i32_load8 (add 4 a a_start i))
            (i32_load8 (add 4 b b_start i)) ]}
          (def i (add i 1)))
        ;;if we got to the end it means they are equal
        (eq i len)
      ]
    )
  )})

  (export compare {fun [a b] (block
    (def len [add { min (length a) (length b)} 4])
    (def i 4)
    (if
      ;; if min length is zero, is the other one longer?
      (eq len 0) (sub (length a) (length b))
      {block
        (loop
          {and (lt i len)
               [eq (def r [sub (i32_load8 (add a i)) (i32_load8 (add b i))]) 0]}
          (block
            (def i (add i 1))
;;            (def r [sub (i32_load8 (add a i)) (i32_load8 (add b i))])
          )
        )
        (if (lt i len) r 0)
      }
    )
  )})

  (export slice {fun (str start end) [block
    (def len [sub (if end end (length str)) start])
    (def _str (mem.alloc (add len 4)))
    (i32_store _str len) ;;string starts with i32 of length
    (def i 0)
    (loop
      [lt i len]
      {block
        [i32_store8 (add _str 4 i) {i32_load8 (add str 4 start i)}]
        (def i (add i 1))})
    _str
  ]})

  (def copy {fun (source s_start s_end target t_start) [block
    (def i 0)
    ;;haha, some bounds checking and errors would be good here
    (loop (lt i s_end)
      [block
        (i32_store8
          (add 4 target t_start i)
          (i32_load8 (add 4 source s_start i)))
        (def i (add i 1))
      ])
     0
  ]})
  (export copy copy)
  (export concat {fun (a b) [block
    (def len (add (length a) (length b)))
    (def c (mem.alloc (add 4 len)))
    (i32_store c len)
    (copy a 0 (length a) c 0)
    (copy b 0 (length b) c (length a))
    c
  ]})
)
